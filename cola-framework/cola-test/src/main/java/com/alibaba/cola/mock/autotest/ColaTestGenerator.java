package com.alibaba.cola.mock.autotest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import com.alibaba.cola.mock.persist.DataMapStore;
import com.alibaba.cola.mock.utils.CommonUtils;
import com.alibaba.cola.mock.utils.Constants;
import com.alibaba.cola.mock.utils.FileUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author shawnzhan.zxy
 * @date 2019/01/12
 */
public class ColaTestGenerator extends AbstractTemplateGenerator{
    private static final String TEMPLATE_FILE = "testclass-template.ftl";
    private String basePackage;
    private TestClass testClass;

    public ColaTestGenerator(String testMethod, String basePackage, Object... params){
        super(true);
        this.testClass = new TestClass(testMethod, params);
        this.basePackage = basePackage;
    }

    @Override
    public void generate(){
        super.generate();
        saveDataMap(testClass);
    }

    @Override
    public Map<String, Object> buildTemplateMap(){
        Map<String, Object> tempalteMap = new HashMap<>();
        tempalteMap.put("namespace", testClass.getNamespace());
        tempalteMap.put("basePackage", basePackage);
        tempalteMap.put("imports", testClass.buildImports());
        tempalteMap.put("date", CommonUtils.formatDate(new Date()));
        tempalteMap.put("unitTestClass", testClass.getUnitTestClassName());
        tempalteMap.put("testClass", testClass.getSimpleClassName());
        tempalteMap.put("testClassName", CommonUtils.toLowerCaseFirstOne(testClass.getSimpleClassName()));
        tempalteMap.put("testMethod", testClass.getMethodName());
        tempalteMap.put("superClass", testClass.getSuperClazzName());
        tempalteMap.put("varDefinitions", testClass.buildVarDefinition());
        tempalteMap.put("params", testClass.buildParams());
        tempalteMap.put("return", testClass.buildReturn());
        return tempalteMap;
    }

    @Override
    public String getOutputFilePath() {
        return testClass.getFilePath();
    }

    @Override
    public String getTemplateFileName(){
        return TEMPLATE_FILE;
    }

    private void saveDataMap(TestClass testClass){
        Map<String, Object> paramterValueMap = testClass.getAutoGenerateDataParameter();
        if(paramterValueMap.size() == 0){
            return;
        }
        DataMapStore dataMapStore = new DataMapStore();
        String fileName = testClass.getNamespace() + Constants.DOT + testClass.getUnitTestClassName();
        fileName = FileUtils.getAbbrOfClassName(fileName);
        dataMapStore.save(paramterValueMap, fileName);
    }
}
